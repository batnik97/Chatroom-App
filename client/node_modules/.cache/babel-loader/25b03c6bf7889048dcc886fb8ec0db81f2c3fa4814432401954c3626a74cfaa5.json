{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx\",\n  _s = $RefreshSig$();\n// ChatRoom.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\nimport { useLocation, Navigate } from 'react-router-dom';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatroom = () => {\n  _s();\n  var _location$state;\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const location = useLocation();\n  const username = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username;\n  const token = localStorage.getItem('token');\n  const [validToken, setValidToken] = useState(true); // State to track token validity\n\n  useEffect(() => {\n    // Function to verify token validity\n    const verifyToken = async () => {\n      try {\n        console.log(token);\n        await axios.get('http://127.0.0.1:5000/api/verifyToken', {\n          headers: {\n            Authorization: `${token}`\n          }\n        });\n        setValidToken(true);\n        if (username) {\n          fetchMessageHistory(username);\n        }\n      } catch (error) {\n        console.error('Invalid token:', error);\n        setValidToken(false);\n      }\n    };\n    if (token) {\n      verifyToken();\n    }\n  }, [username, token]);\n  const fetchMessageHistory = async username => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/api/messages', {\n        params: {\n          username: username\n        }\n      });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', {\n        username: username,\n        content: messageInput\n      });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleVote = async (messageId, voteType, userVote) => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}`, {\n        voteType: voteType,\n        userVote: userVote\n      });\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map(message => {\n        if (message._id === messageId) {\n          let upvoteInc = 0;\n          let downvoteInc = 0;\n          if (userVote === 'upvote') {\n            if (voteType === 'downvote') {\n              downvoteInc = 1;\n            }\n            upvoteInc = -1;\n          } else if (userVote === 'downvote') {\n            if (voteType === 'upvote') {\n              upvoteInc = 1;\n            }\n            downvoteInc = -1;\n          } else {\n            if (voteType === 'upvote') {\n              upvoteInc = 1;\n            } else {\n              downvoteInc = 1;\n            }\n          }\n          return {\n            ...message,\n            upvotes: message.upvotes + upvoteInc,\n            downvotes: message.downvotes + downvoteInc,\n            userVote: userVote === voteType ? 'none' : voteType\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    // Navigate to login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this);\n  };\n  if (!token || !validToken) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: logout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        onVote: handleVote\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatroom, \"sr5FUMKXHeTS7UyY9e8gmp0U1QE=\", false, function () {\n  return [useLocation];\n});\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","axios","Message","useLocation","Navigate","jsxDEV","_jsxDEV","Chatroom","_s","_location$state","messageInput","setMessageInput","messages","setMessages","location","username","state","token","localStorage","getItem","validToken","setValidToken","verifyToken","console","log","get","headers","Authorization","fetchMessageHistory","error","response","params","data","sendMessage","trim","alert","post","content","handleVote","messageId","voteType","userVote","put","updatedMessages","map","message","_id","upvoteInc","downvoteInc","upvotes","downvotes","logout","removeItem","to","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","onVote","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx"],"sourcesContent":["// ChatRoom.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message, { MessageProps } from './Message';\nimport { useLocation, Navigate } from 'react-router-dom';\nimport './ChatRoom.css';\n\nconst Chatroom: React.FC = () => {\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState<MessageProps[]>([]);\n  const location = useLocation();\n  const username = location.state?.username;\n  const token = localStorage.getItem('token');\n  const [validToken, setValidToken] = useState(true); // State to track token validity\n\n  useEffect(() => {\n    // Function to verify token validity\n    const verifyToken = async () => {\n      try {\n        console.log(token);\n        await axios.get('http://127.0.0.1:5000/api/verifyToken', {\n          headers: {\n            Authorization: `${token}`,\n          },\n        });\n        setValidToken(true);\n        if (username) {\n          fetchMessageHistory(username);\n        }\n      } catch (error) {\n        console.error('Invalid token:', error);\n        setValidToken(false);\n      }\n    };\n\n    if (token) {\n      verifyToken();\n    }\n  }, [username, token]);\n\n  const fetchMessageHistory = async (username: string) => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/api/messages', { params: { username: username } });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', {  username: username, content: messageInput });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const handleVote = async (messageId: string, voteType: 'upvote' | 'downvote', userVote: 'upvote' | 'downvote' | 'none') => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}`, { voteType: voteType, userVote: userVote });\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map((message: any) => {\n        if (message._id === messageId) {\n\n          let upvoteInc = 0;\n          let downvoteInc = 0;\n\n          if (userVote === 'upvote') {\n              if (voteType === 'downvote') {\n                  downvoteInc = 1;\n              }\n              upvoteInc = -1;\n          } else if (userVote === 'downvote') {\n              if (voteType === 'upvote') {\n                  upvoteInc = 1;\n              }\n              downvoteInc = -1;\n          } else {\n              if (voteType === 'upvote') {\n                  upvoteInc = 1;\n              } else {\n                  downvoteInc = 1;\n              }\n          }\n          \n          return {\n            ...message,\n            upvotes: message.upvotes + upvoteInc,\n            downvotes: message.downvotes + downvoteInc,\n            userVote: userVote === voteType ? 'none' : voteType\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    // Navigate to login page\n    return <Navigate to=\"/login\" />;\n  };\n\n  if (!token || !validToken) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <div className=\"chatroom-container\">\n      <div className=\"header\">\n        <h2>Chatroom</h2>\n        <button className=\"logout-button\" onClick={logout}>Logout</button>\n      </div>\n      <div className=\"messages\">\n        {messages.map((message: any) => (\n          <Message key={message._id} message={message} onVote={handleVote} />\n        ))}\n      </div>\n      <div className=\"message-input\">\n        <input type=\"text\" value={messageInput} onChange={(e) => setMessageInput(e.target.value)} />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatroom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}