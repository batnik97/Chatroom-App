{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx\",\n  _s = $RefreshSig$();\n// ChatRoom.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './ChatRoom.css';\n\n/**\n * Chatroom component manages the chat interface.\n * It allows users to send and receive messages, vote on messages, and logout.\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatroom = () => {\n  _s();\n  var _location$state;\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const location = useLocation();\n  const username = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username;\n  const token = localStorage.getItem('token');\n  const [validToken, setValidToken] = useState(true);\n  const navigate = useNavigate();\n  const serverUrl = process.env.REACT_APP_SERVER_URL || 'http://127.0.0.1:5000';\n  useEffect(() => {\n    // Function to verify token validity\n    const verifyToken = async () => {\n      try {\n        await axios.get('${serverUrl}/api/verifyToken', {\n          headers: {\n            Authorization: token\n          }\n        });\n        setValidToken(true);\n        if (username) {\n          fetchMessageHistory(username);\n        }\n      } catch (error) {\n        console.error('Invalid token:', error);\n        setValidToken(false);\n      }\n    };\n    if (token) {\n      verifyToken();\n    }\n  }, [username, token]);\n\n  /**\n   * Fetches message history for the given username.\n   * Populates the chatroom with existing messages.\n   *\n   * @param {string} username - The username for which to fetch message history.\n   */\n  const fetchMessageHistory = async username => {\n    try {\n      const response = await axios.get('${serverUrl}/api/messages', {\n        params: {\n          username: username\n        },\n        headers: {\n          Authorization: token\n        }\n      });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n\n  /**\n   * Sends a message to the chat.\n   * If the message input is not empty, sends the message to the server.\n   */\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', {\n        username: username,\n        content: messageInput\n      }, {\n        headers: {\n          Authorization: token\n        }\n      });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  /**\n   * Handles voting on a message.\n   * Sends a request to the server to register the user's vote on a message.\n   *\n   * @param {string} messageId - The ID of the message to vote on.\n   * @param {'upvote' | 'downvote'} voteType - The type of vote ('upvote' or 'downvote').\n   * @param {'upvote' | 'downvote' | 'none'} userVote - The current user's vote status on the message.\n   */\n  const handleVote = async (messageId, voteType, userVote) => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}`, {\n        voteType: voteType,\n        userVote: userVote\n      }, {\n        headers: {\n          Authorization: token\n        }\n      });\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map(message => {\n        if (message._id === messageId) {\n          let upvoteInc = 0;\n          let downvoteInc = 0;\n          if (userVote === 'upvote') {\n            if (voteType === 'downvote') {\n              downvoteInc = 1;\n            }\n            upvoteInc = -1;\n          } else if (userVote === 'downvote') {\n            if (voteType === 'upvote') {\n              upvoteInc = 1;\n            }\n            downvoteInc = -1;\n          } else {\n            if (voteType === 'upvote') {\n              upvoteInc = 1;\n            } else {\n              downvoteInc = 1;\n            }\n          }\n          return {\n            ...message,\n            upvotes: message.upvotes + upvoteInc,\n            downvotes: message.downvotes + downvoteInc,\n            userVote: userVote === voteType ? 'none' : voteType\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n\n  /**\n   * Logs out the user by removing the token from local storage and redirecting to the login page.\n   */\n  const logout = () => {\n    localStorage.removeItem('token');\n    navigate('/login');\n  };\n\n  // Redirect to login page if token is invalid or missing\n  if (!token || !validToken) {\n    navigate('/login');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"chatroom-heading\",\n        children: \"Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"logout-button\",\n        onClick: logout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        onVote: handleVote\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatroom, \"Jwi6sW7fQE/gymU2jHT26P/n/wA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","axios","Message","useLocation","useNavigate","jsxDEV","_jsxDEV","Chatroom","_s","_location$state","messageInput","setMessageInput","messages","setMessages","location","username","state","token","localStorage","getItem","validToken","setValidToken","navigate","serverUrl","process","env","REACT_APP_SERVER_URL","verifyToken","get","headers","Authorization","fetchMessageHistory","error","console","response","params","data","sendMessage","trim","alert","post","content","handleVote","messageId","voteType","userVote","put","updatedMessages","map","message","_id","upvoteInc","downvoteInc","upvotes","downvotes","logout","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onVote","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx"],"sourcesContent":["// ChatRoom.tsx\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message, { MessageProps } from './Message';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './ChatRoom.css';\n\n/**\n * Chatroom component manages the chat interface.\n * It allows users to send and receive messages, vote on messages, and logout.\n *\n */\nconst Chatroom: React.FC = () => {\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState<MessageProps[]>([]);\n  const location = useLocation();\n  const username = location.state?.username;\n  const token = localStorage.getItem('token');\n  const [validToken, setValidToken] = useState(true);\n  const navigate = useNavigate();\n  const serverUrl = process.env.REACT_APP_SERVER_URL || 'http://127.0.0.1:5000';\n\n  useEffect(() => {\n    // Function to verify token validity\n    const verifyToken = async () => {\n      try {\n        await axios.get('${serverUrl}/api/verifyToken', {\n          headers: {\n            Authorization: token,\n          },\n        });\n        setValidToken(true);\n        if (username) {\n          fetchMessageHistory(username);\n        }\n      } catch (error) {\n        console.error('Invalid token:', error);\n        setValidToken(false);\n      }\n    };\n\n    if (token) {\n      verifyToken();\n    }\n  }, [username, token]);\n\n  /**\n   * Fetches message history for the given username.\n   * Populates the chatroom with existing messages.\n   *\n   * @param {string} username - The username for which to fetch message history.\n   */\n  const fetchMessageHistory = async (username: string) => {\n    try {\n      const response = await axios.get('${serverUrl}/api/messages', { \n        params: { username: username },\n        headers: {\n          Authorization: token,\n        },\n       });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n\n  /**\n   * Sends a message to the chat.\n   * If the message input is not empty, sends the message to the server.\n   */\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', {  \n          username: username, \n          content: messageInput,\n      }, {\n          headers: {\n              Authorization: token,\n          }\n      });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  /**\n   * Handles voting on a message.\n   * Sends a request to the server to register the user's vote on a message.\n   *\n   * @param {string} messageId - The ID of the message to vote on.\n   * @param {'upvote' | 'downvote'} voteType - The type of vote ('upvote' or 'downvote').\n   * @param {'upvote' | 'downvote' | 'none'} userVote - The current user's vote status on the message.\n   */\n  const handleVote = async (messageId: string, voteType: 'upvote' | 'downvote', userVote: 'upvote' | 'downvote' | 'none') => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}`, { \n          voteType: voteType, \n          userVote: userVote,\n      }, {\n          headers: {\n              Authorization: token,\n          }\n      });\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map((message: any) => {\n        if (message._id === messageId) {\n\n          let upvoteInc = 0;\n          let downvoteInc = 0;\n\n          if (userVote === 'upvote') {\n              if (voteType === 'downvote') {\n                  downvoteInc = 1;\n              }\n              upvoteInc = -1;\n          } else if (userVote === 'downvote') {\n              if (voteType === 'upvote') {\n                  upvoteInc = 1;\n              }\n              downvoteInc = -1;\n          } else {\n              if (voteType === 'upvote') {\n                  upvoteInc = 1;\n              } else {\n                  downvoteInc = 1;\n              }\n          }\n          \n          return {\n            ...message,\n            upvotes: message.upvotes + upvoteInc,\n            downvotes: message.downvotes + downvoteInc,\n            userVote: userVote === voteType ? 'none' : voteType\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n\n  /**\n   * Logs out the user by removing the token from local storage and redirecting to the login page.\n   */\n  const logout = () => {\n    localStorage.removeItem('token');\n    navigate('/login');\n  };\n\n  // Redirect to login page if token is invalid or missing\n  if (!token || !validToken) {\n    navigate('/login');\n  }\n\n  return (\n    <div className=\"chatroom-container\">\n      <div className=\"header\">\n        <h2 className=\"chatroom-heading\">Chatroom</h2>\n        <button className=\"logout-button\" onClick={logout}>Logout</button>\n      </div>\n      <div className=\"messages\">\n        {messages.map((message: any) => (\n          <Message key={message._id} message={message} onVote={handleVote} />\n        ))}\n      </div>\n      <div className=\"message-input\">\n        <input type=\"text\" value={messageInput} onChange={(e) => setMessageInput(e.target.value)} />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatroom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}