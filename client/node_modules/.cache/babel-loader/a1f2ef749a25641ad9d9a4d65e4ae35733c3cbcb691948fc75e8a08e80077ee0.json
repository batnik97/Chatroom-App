{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\n// import { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatroom = () => {\n  _s();\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  console.log(username);\n  useEffect(() => {\n    fetchMessageHistory();\n  }, []);\n  const fetchMessageHistory = async () => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/api/messages');\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', {\n        content: messageInput\n      });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleVote = async (messageId, voteType) => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}/${voteType}`);\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map(message => {\n        if (message._id === messageId) {\n          return {\n            ...message,\n            votes: voteType === 'upvote' ? message.votes + 1 : message.votes - 1\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatroom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        onVote: handleVote\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatroom, \"XOaQvDo4P1/gJpIy9DfH1Ch5uvY=\");\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","axios","Message","jsxDEV","_jsxDEV","Chatroom","_s","messageInput","setMessageInput","messages","setMessages","console","log","username","fetchMessageHistory","response","get","data","error","sendMessage","trim","alert","post","content","handleVote","messageId","voteType","put","updatedMessages","map","message","_id","votes","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onVote","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message, { MessageProps } from './Message';\n// import { useLocation } from 'react-router-dom';\n\nconst Chatroom: React.FC = () => {\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState<MessageProps[]>([]);\n\n  console.log(username);\n\n  useEffect(() => {\n    fetchMessageHistory();\n  }, []);\n\n  const fetchMessageHistory = async () => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/api/messages');\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', { content: messageInput });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const handleVote = async (messageId: string, voteType: 'upvote' | 'downvote') => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}/${voteType}`);\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map((message: any) => {\n        if (message._id === messageId) {\n          return {\n            ...message,\n            votes: voteType === 'upvote' ? message.votes + 1 : message.votes - 1,\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Chatroom</h2>\n      <div className=\"messages\">\n        {messages.map((message: any) => (\n          <Message key={message._id} message={message} onVote={handleVote} />\n        ))}\n      </div>\n      <div className=\"message-input\">\n        <input type=\"text\" value={messageInput} onChange={(e) => setMessageInput(e.target.value)} />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatroom;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAwB,WAAW;AACjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAiB,EAAE,CAAC;EAE5DY,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAErBb,SAAS,CAAC,MAAM;IACdc,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,oCAAoC,CAAC;MACtEN,WAAW,CAACK,QAAQ,CAACE,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF;MACA,IAAI,CAACZ,YAAY,CAACa,IAAI,CAAC,CAAC,EAAE;QACxBC,KAAK,CAAC,yBAAyB,CAAC;QAChC;MACF;MACA,MAAMN,QAAQ,GAAG,MAAMd,KAAK,CAACqB,IAAI,CAAC,oCAAoC,EAAE;QAAEC,OAAO,EAAEhB;MAAa,CAAC,CAAC;MAClGG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEM,QAAQ,CAACE,IAAI,CAAC,CAAC;MACzCT,eAAe,CAAC,EAAE,CAAC;IACrB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,MAAMM,UAAU,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,QAA+B,KAAK;IAC/E,IAAI;MACF,MAAMzB,KAAK,CAAC0B,GAAG,CAAE,sCAAqCF,SAAU,IAAGC,QAAS,EAAC,CAAC;MAC9E;MACA,MAAME,eAAe,GAAGnB,QAAQ,CAACoB,GAAG,CAAEC,OAAY,IAAK;QACrD,IAAIA,OAAO,CAACC,GAAG,KAAKN,SAAS,EAAE;UAC7B,OAAO;YACL,GAAGK,OAAO;YACVE,KAAK,EAAEN,QAAQ,KAAK,QAAQ,GAAGI,OAAO,CAACE,KAAK,GAAG,CAAC,GAAGF,OAAO,CAACE,KAAK,GAAG;UACrE,CAAC;QACH;QACA,OAAOF,OAAO;MAChB,CAAC,CAAC;MACFpB,WAAW,CAACkB,eAAe,CAAC;IAC9B,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,oBACEd,OAAA;IAAA6B,QAAA,gBACE7B,OAAA;MAAA6B,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBjC,OAAA;MAAKkC,SAAS,EAAC,UAAU;MAAAL,QAAA,EACtBxB,QAAQ,CAACoB,GAAG,CAAEC,OAAY,iBACzB1B,OAAA,CAACF,OAAO;QAAmB4B,OAAO,EAAEA,OAAQ;QAACS,MAAM,EAAEf;MAAW,GAAlDM,OAAO,CAACC,GAAG;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyC,CACnE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNjC,OAAA;MAAKkC,SAAS,EAAC,eAAe;MAAAL,QAAA,gBAC5B7B,OAAA;QAAOoC,IAAI,EAAC,MAAM;QAACC,KAAK,EAAElC,YAAa;QAACmC,QAAQ,EAAGC,CAAC,IAAKnC,eAAe,CAACmC,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5FjC,OAAA;QAAQyC,OAAO,EAAE1B,WAAY;QAAAc,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/B,EAAA,CAnEID,QAAkB;AAAAyC,EAAA,GAAlBzC,QAAkB;AAqExB,eAAeA,QAAQ;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}