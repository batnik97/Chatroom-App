{"ast":null,"code":"var _jsxFileName = \"/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\nimport { useLocation } from 'react-router-dom';\nimport './ChatRoom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatroom = () => {\n  _s();\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const location = useLocation();\n  const username = location.state.username;\n  const increments = {\n    upvote: {\n      upvote: -1,\n      downvote: -2,\n      none: 1\n    },\n    downvote: {\n      upvote: 2,\n      downvote: 1,\n      none: -1\n    },\n    none: {\n      upvote: 1,\n      downvote: -1\n    }\n  };\n  useEffect(() => {\n    fetchMessageHistory(username);\n  }, [username]);\n  const fetchMessageHistory = async username => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/api/messages', {\n        username: username\n      });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', {\n        username: username,\n        content: messageInput\n      });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleVote = async (messageId, voteType, userVote) => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}`, {\n        voteType: voteType,\n        userVote: userVote\n      });\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map(message => {\n        if (message._id === messageId) {\n          var _increments$userVote$, _increments$userVote;\n          const inc = (_increments$userVote$ = (_increments$userVote = increments[userVote]) === null || _increments$userVote === void 0 ? void 0 : _increments$userVote[voteType]) !== null && _increments$userVote$ !== void 0 ? _increments$userVote$ : 0;\n          return {\n            ...message,\n            votes: message.votes + inc,\n            userVote: userVote === voteType ? 'none' : voteType\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroom-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatroom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message,\n        onVote: handleVote\n      }, message._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatroom, \"3SGLj1ppsb4/rrMS17iaV+tL/Ao=\", false, function () {\n  return [useLocation];\n});\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","axios","Message","useLocation","jsxDEV","_jsxDEV","Chatroom","_s","messageInput","setMessageInput","messages","setMessages","location","username","state","increments","upvote","downvote","none","fetchMessageHistory","response","get","data","error","console","sendMessage","trim","alert","post","content","handleVote","messageId","voteType","userVote","put","updatedMessages","map","message","_id","_increments$userVote$","_increments$userVote","inc","votes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onVote","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/nikhilreddy/Nimble Hackathon/ChatRoom/chatroom-app/frontend/src/ChatRoom.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Message, { MessageProps } from './Message';\nimport { useLocation } from 'react-router-dom';\nimport './ChatRoom.css';\n\nconst Chatroom: React.FC = () => {\n  const [messageInput, setMessageInput] = useState('');\n  const [messages, setMessages] = useState<MessageProps[]>([]);\n  const location = useLocation();\n  const username = location.state.username\n  const increments: { [key: string]: { [key: string]: number } } = {\n    upvote: {\n      upvote: -1,\n      downvote: -2,\n      none: 1\n    },\n    downvote: {\n      upvote: 2,\n      downvote: 1,\n      none: -1\n    },\n    none: {\n      upvote: 1,\n      downvote: -1\n    }\n  };\n\n  useEffect(() => {\n    fetchMessageHistory(username);\n  }, [username]);\n\n  const fetchMessageHistory = async (username: string) => {\n    try {\n      const response = await axios.get('http://127.0.0.1:5000/api/messages', { username: username });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error fetching message history:', error);\n    }\n  };\n\n  const sendMessage = async () => {\n    try {\n      // Check if message is not empty\n      if (!messageInput.trim()) {\n        alert('Message can\\'t be empty');\n        return;\n      }\n      const response = await axios.post('http://127.0.0.1:5000/api/messages', {  username: username, content: messageInput });\n      setMessages([...messages, response.data]);\n      setMessageInput('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const handleVote = async (messageId: string, voteType: 'upvote' | 'downvote', userVote: 'upvote' | 'downvote' | 'none') => {\n    try {\n      await axios.put(`http://127.0.0.1:5000/api/messages/${messageId}`, { voteType: voteType, userVote: userVote });\n      // Update the local state to reflect the change in votes\n      const updatedMessages = messages.map((message: any) => {\n        if (message._id === messageId) {\n          const inc = increments[userVote]?.[voteType] ?? 0;\n          \n          return {\n            ...message,\n            votes: message.votes + inc,\n            userVote: userVote === voteType ? 'none' : voteType\n          };\n        }\n        return message;\n      });\n      setMessages(updatedMessages);\n    } catch (error) {\n      console.error('Error voting on message:', error);\n    }\n  };\n\n  return (\n    <div className=\"chatroom-container\">\n      <h2>Chatroom</h2>\n      <div className=\"messages\">\n        {messages.map((message: any) => (\n          <Message key={message._id} message={message} onVote={handleVote} />\n        ))}\n      </div>\n      <div className=\"message-input\">\n        <input type=\"text\" value={messageInput} onChange={(e) => setMessageInput(e.target.value)} />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatroom;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAwB,WAAW;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAiB,EAAE,CAAC;EAC5D,MAAMa,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGD,QAAQ,CAACE,KAAK,CAACD,QAAQ;EACxC,MAAME,UAAwD,GAAG;IAC/DC,MAAM,EAAE;MACNA,MAAM,EAAE,CAAC,CAAC;MACVC,QAAQ,EAAE,CAAC,CAAC;MACZC,IAAI,EAAE;IACR,CAAC;IACDD,QAAQ,EAAE;MACRD,MAAM,EAAE,CAAC;MACTC,QAAQ,EAAE,CAAC;MACXC,IAAI,EAAE,CAAC;IACT,CAAC;IACDA,IAAI,EAAE;MACJF,MAAM,EAAE,CAAC;MACTC,QAAQ,EAAE,CAAC;IACb;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdmB,mBAAmB,CAACN,QAAQ,CAAC;EAC/B,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMM,mBAAmB,GAAG,MAAON,QAAgB,IAAK;IACtD,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,oCAAoC,EAAE;QAAER,QAAQ,EAAEA;MAAS,CAAC,CAAC;MAC9FF,WAAW,CAACS,QAAQ,CAACE,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF;MACA,IAAI,CAACjB,YAAY,CAACkB,IAAI,CAAC,CAAC,EAAE;QACxBC,KAAK,CAAC,yBAAyB,CAAC;QAChC;MACF;MACA,MAAMP,QAAQ,GAAG,MAAMnB,KAAK,CAAC2B,IAAI,CAAC,oCAAoC,EAAE;QAAGf,QAAQ,EAAEA,QAAQ;QAAEgB,OAAO,EAAErB;MAAa,CAAC,CAAC;MACvHG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEU,QAAQ,CAACE,IAAI,CAAC,CAAC;MACzCb,eAAe,CAAC,EAAE,CAAC;IACrB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,MAAMO,UAAU,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,QAA+B,EAAEC,QAAwC,KAAK;IACzH,IAAI;MACF,MAAMhC,KAAK,CAACiC,GAAG,CAAE,sCAAqCH,SAAU,EAAC,EAAE;QAAEC,QAAQ,EAAEA,QAAQ;QAAEC,QAAQ,EAAEA;MAAS,CAAC,CAAC;MAC9G;MACA,MAAME,eAAe,GAAGzB,QAAQ,CAAC0B,GAAG,CAAEC,OAAY,IAAK;QACrD,IAAIA,OAAO,CAACC,GAAG,KAAKP,SAAS,EAAE;UAAA,IAAAQ,qBAAA,EAAAC,oBAAA;UAC7B,MAAMC,GAAG,IAAAF,qBAAA,IAAAC,oBAAA,GAAGzB,UAAU,CAACkB,QAAQ,CAAC,cAAAO,oBAAA,uBAApBA,oBAAA,CAAuBR,QAAQ,CAAC,cAAAO,qBAAA,cAAAA,qBAAA,GAAI,CAAC;UAEjD,OAAO;YACL,GAAGF,OAAO;YACVK,KAAK,EAAEL,OAAO,CAACK,KAAK,GAAGD,GAAG;YAC1BR,QAAQ,EAAEA,QAAQ,KAAKD,QAAQ,GAAG,MAAM,GAAGA;UAC7C,CAAC;QACH;QACA,OAAOK,OAAO;MAChB,CAAC,CAAC;MACF1B,WAAW,CAACwB,eAAe,CAAC;IAC9B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,oBACElB,OAAA;IAAKsC,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjCvC,OAAA;MAAAuC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB3C,OAAA;MAAKsC,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtBlC,QAAQ,CAAC0B,GAAG,CAAEC,OAAY,iBACzBhC,OAAA,CAACH,OAAO;QAAmBmC,OAAO,EAAEA,OAAQ;QAACY,MAAM,EAAEnB;MAAW,GAAlDO,OAAO,CAACC,GAAG;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAyC,CACnE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN3C,OAAA;MAAKsC,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BvC,OAAA;QAAO6C,IAAI,EAAC,MAAM;QAACC,KAAK,EAAE3C,YAAa;QAAC4C,QAAQ,EAAGC,CAAC,IAAK5C,eAAe,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC5F3C,OAAA;QAAQkD,OAAO,EAAE9B,WAAY;QAAAmB,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzC,EAAA,CAtFID,QAAkB;EAAA,QAGLH,WAAW;AAAA;AAAAqD,EAAA,GAHxBlD,QAAkB;AAwFxB,eAAeA,QAAQ;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}